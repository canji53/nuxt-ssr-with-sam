AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: >
  Server Side Rendering and Build static Hosting.

Parameters:
  ServiceName:
    Type: String
    Default: hogehoge
  Environment:
    Type: String
    Default: prod
  SubDomain:
    Type: String
    Default: www
  NakedDomain:
    Type: String
    Default: hogehoge.com
  CFSSLCertificateId:
    Type: String
    NoEcho: true

Globals:
  Function:
    Runtime: nodejs12.x
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Resources:
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ServiceName}-${Environment}-ssr
      StageName: !Ref Environment
      OpenApiVersion: 3.0.2
      BinaryMediaTypes:
        - '*/*'

  RenderLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${ServiceName}-${Environment}-render
      ContentUri: .layer/render
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Delete

  NuxtLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${ServiceName}-${Environment}-nuxt
      ContentUri: .layer/nuxt
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Delete

  RenderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ServiceName}-${Environment}-ssr-nuxt
      CodeUri: render/
      Handler: app.lambdaHandler
      Layers:
        - !Ref RenderLambdaLayer
        - !Ref NuxtLambdaLayer
      Timeout: 30
      MemorySize: 256
      Events:
        RenderEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /
            Method: GET
        RenderProxyEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /{proxy+}
            Method: GET

  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${ServiceName}-${Environment}-static-assets
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: true

  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${StaticAssetsBucket}/*
              - !Sub arn:aws:s3:::${StaticAssetsBucket}
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${StaticAssetsBucket}

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        # Generail - Distribution Settings
        PriceClass: PriceClass_All
        Aliases:
          - !Sub ${SubDomain}.${NakedDomain}
        ViewerCertificate:
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
          AcmCertificateArn: !Sub arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${CFSSLCertificateId}
        HttpVersion: http2
        Enabled: true
        # Origins and Origin Groups
        Origins:
          # API Origin
          - DomainName: !Sub ${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com
            OriginPath: !Sub /${Environment}
            Id: !Sub Custom-${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
          # S3 Origin
          - DomainName: !GetAtt StaticAssetsBucket.DomainName
            Id: !Sub S3origin-${StaticAssetsBucket}
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        # Behaviors
        # API Gateway Behavior
        DefaultCacheBehavior:
          TargetOriginId: !Sub Custom-${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: true
        # Static S3 Behavior
        CacheBehaviors:
          - PathPattern: '*.png'
            TargetOriginId: !Sub S3origin-${StaticAssetsBucket}
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            Compress: true
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
          - PathPattern: '_nuxt/*'
            TargetOriginId: !Sub S3origin-${StaticAssetsBucket}
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            Compress: true
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: true